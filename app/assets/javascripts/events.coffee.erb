# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

window.load_remote_parts = ->
  $("[data-remote-load=true]").each ->
    div = $(this)
    #div.append('<%=image_tag "loading.gif" %><br /> <h5>Loading...</h5>')
    div.append('<br /> <h5>Loading...</h5>')
    $.get div.data("remote-url"), (data) ->
      div.html(data)
      drag_events()
      load_add_years_buttons()
      
load_add_years_buttons = ->
  $("#addearlieryears").click (e) ->
    e.preventDefault()
    y = parseInt($("ul.years li:first").data("year"))
    $.get $(this).data("y-url"), {start_year: y - 10, end_year: y-1}, (data) ->
      $("ul.years").prepend(data)
      
  $("#addlateryears").click (e) ->
    e.preventDefault()
    y = parseInt($("ul.years > li:last").data("year"))
    $.get $(this).data("y-url"), {start_year: y + 1, end_year: y+10}, (data) ->
      $("ul.years").append(data)
      
next_date = (d) ->
  d_arr = d.match(/(.+)-(\d\d)-(\d\d)/)
  if parseInt(d_arr[3]) < 28 
    return d_arr[1] + "-" + d_arr[2] + "-" + ("0"+(parseInt(d_arr[3]) + 1)).slice(-2)
  else if parseInt(d_arr[2]) < 12
    return d_arr[1] + "-" + ("0"+(parseInt(d_arr[2]) + 1)).slice(-2) + "-01"
  else
    return d
        
window.merge_timeslots = ->
  $("a.timeslot").each ->
    if $(this).next().hasClass("timeslot")
      $(this).next().remove()
      
drag_events = ->
  $(".event").draggable({ revert: "invalid" })
  $(".timeslot").droppable
    activeClass: "ui-state-default"
    hoverClass: "ui-state-hover"
    drop: (event, ui) ->
      item = ui.draggable
      item.css {
        "top": 0,
        "left": 0
      }
      $(this).after item

      #Add timeslot after
      d = next_date($(this).data("next-date"))
      item.after $(this).clone().attr({
        "data-date": d,
        "data-next-date": next_date(d)
      })
      
      merge_timeslots()
      
      #Update item
      $.post( $("ul.years").data("update-happened"), {id: item.data("id"), happened_on: $(this).data("next-date")}).fail ->
        alert "error"
        load_remote_parts()
      return
      
#Validations
failInput = (input, msg) ->
  unless $(input).next().text() is msg
    $(input).after "<span class=\"help-inline\">" + msg + "</span>"
    $(input).closest(".form-group").addClass "has-error"
  $(input).closest("form").find("[type=submit]").prop "disabled", true
clearInputHelp = (input) ->
  $(input).parent().find(".help-inline").remove()
  $(input).closest(".form-group").removeClass "has-error"
  $(input).closest("form").find("[type=submit]").prop "disabled", false      
window.setValidationCheck = ->
  $("[data-validate]").keyup ->
    clearInputHelp this
    $(this).closest("form").find("[data-validate]").each ->
      input = this
      validations = $(this).data("validate").split(" ")
      $.each validations, (index, val) ->
        switch val
          when "presence"
            failInput input, "Can not be blank"  if input.value.length < 1
          when "dateformat"
            failInput input, "Date must be formatted like yyyy-mm-dd" if !input.value.match(/-?\d{4}-\d{2}-\d{2}/)
          #when "validdaymonth"
          #  d = input.value.trim()
          #  dd = new Date(d.substr(d.length - 5))
          #  failInput input, "Date is invalid" if !dd.getMonth()
          when "remote"
            url = $(input).data("remote-url")
            if url
              $.post url,
                val: input.value
                id: $(input).data("id")
              , (data) ->
                failInput input, data.msg  unless data.success
                
$(document).ready ->
  if $("#events_index").length > 0
    #Show start date modal if it doesn't already exist
    $("#start_event[data-new='true']").modal()
    
    $("#new_event_modal, #edit_event_modal").on "show.bs.modal", (event) ->
      button = $(event.relatedTarget) 
      modal = $(this)
      $.get button.data("e-url"), (data) ->
        modal.find(".modal-body").html(data)
        modal.find("#event_happened_on").val(button.data("date")) if button.data("date")
        setValidationCheck()
          
    $("#new_event_modal, #edit_event_modal").on 'hide.bs.modal', (e) ->
      #if !confirm("Any changes will be lost. Are you sure you want to close this box?")
      #  e.preventDefault()
      tinyMCE.editors=[];
      
    $("#year_display").on "show.bs.modal", (event) ->
      $(this).find("#original_year").text($(event.relatedTarget).closest("li").data("year"))
    
    $("#year_display input[type=submit]").click ->
      diff = parseInt($(this).closest(".modal").find("#original_year").text()) - parseInt($("#year_display #year_as").val())
      $("ul.years > li a.year").each ->
        $(this).html ($(this).closest("li").data("year") - diff)
        $(this).after( "<small class='o_year'>" + $(this).closest("li").data("year") + "</small>") if !$(this).next().hasClass("o_year")
      $("#year_display").modal('hide')
      
    load_remote_parts()
    
    